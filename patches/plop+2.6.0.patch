diff --git a/node_modules/plop/src/bypass.js b/node_modules/plop/src/bypass.js
index f7d05ed..1618dc7 100644
--- a/node_modules/plop/src/bypass.js
+++ b/node_modules/plop/src/bypass.js
@@ -21,7 +21,7 @@ function combineBypassData(generator, bypassArr, plopArgV) {
 	const promptNames = generator.prompts.map((prompt) => prompt.name);
 	// Check if bypassArr is too long for promptNames
 	if (bypassArr.length > promptNames.length) {
-		console.error(chalk.red('[PLOP] ') + 'Too many bypass arguments passed for "' + generator.name + '"');
+		console.error(chalk.red('[next-codegen] ') + 'Too many bypass arguments passed for "' + generator.name + '"');
 		out.getHelpMessage(generator);
 		process.exit(1);
 	}
@@ -32,7 +32,7 @@ function combineBypassData(generator, bypassArr, plopArgV) {
 		let errors = false;
 		Object.keys(plopArgV).forEach((arg) => {
 			if (!(promptNames.find((name) => name === arg)) && arg !== '_') {
-				console.error(chalk.red('[PLOP] ') + '"' + arg + '"' + ' is an invalid argument for "' + generator.name + '"');
+				console.error(chalk.red('[next-codegen] ') + '"' + arg + '"' + ' is an invalid argument for "' + generator.name + '"');
 				errors = true;
 			}
 		});
diff --git a/node_modules/plop/src/console-out.js b/node_modules/plop/src/console-out.js
index 1f901ec..3ca3dd6 100644
--- a/node_modules/plop/src/console-out.js
+++ b/node_modules/plop/src/console-out.js
@@ -4,7 +4,7 @@ const chalk = require('chalk');
 const nodePlop = require('node-plop');
 const fs = require('fs');
 
-const defaultChoosingMessage = chalk.blue('[PLOP]') + ' Please choose a generator.';
+const defaultChoosingMessage = chalk.blue('[next-codegen]') + ' Please choose a generator.';
 
 module.exports = (function () {
 
diff --git a/node_modules/plop/src/plop.js b/node_modules/plop/src/plop.js
index 703b6b7..bcfca8e 100755
--- a/node_modules/plop/src/plop.js
+++ b/node_modules/plop/src/plop.js
@@ -16,6 +16,9 @@ const out = require('./console-out');
 const {combineBypassData} = require('./bypass');
 const {getBypassAndGenerator, handleArgFlags} = require('./input-processing');
 
+// INIT_CWD is for inside of yarn/npm scripts, otherwise process.cwd() is reliable
+argv.dest = process.env.INIT_CWD || process.cwd()
+
 const Plop = new Liftoff({
 	name: 'plop',
 	extensions: interpret.jsVariants,
@@ -48,7 +51,7 @@ function run(env) {
 	// hmmmm, couldn't identify a generator in the user's input
 	if (!generators.length) {
 		// no generators?! there's clearly something wrong here
-		console.error(chalk.red('[PLOP] ') + 'No generator found in plopfile');
+		console.error(chalk.red('[next-codegen] ') + 'No generator found in plopfile');
 		process.exit(1);
 	} else if (!generatorName && generators.length === 1) {
 		// only one generator in this plopfile... let's assume they
@@ -60,7 +63,7 @@ function run(env) {
 		out.chooseOptionFromList(generators, plop.getWelcomeMessage())
 			.then(runGeneratorByName)
 			.catch((err) => {
-				console.error(chalk.red('[PLOP] ') + 'Something went wrong with selecting a generator', err);
+				console.error(chalk.red('[next-codegen] ') + 'Something went wrong with selecting a generator', err);
 			});
 	} else if (generatorNames.includes(generatorName)) {
 		// we have found the generator, run it!
@@ -68,7 +71,7 @@ function run(env) {
 	} else {
 		// we just can't make sense of your input... sorry :-(
 		const fuzyGenName = (generatorName + ' ' + args.join(' ')).trim();
-		console.error(chalk.red('[PLOP] ') + 'Could not find a generator for "' + fuzyGenName + '"');
+		console.error(chalk.red('[next-codegen] ') + 'Could not find a generator for "' + fuzyGenName + '"');
 		process.exit(1);
 	}
 
